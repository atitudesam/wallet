{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ERROR, REMOVE_ERROR } from '../types/errorTypes';\nconst initialState = {\n  message: null\n};\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case ERROR:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        message: action.payload\n      });\n\n    case REMOVE_ERROR:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        message: null\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/mubashirsiddiqui/Projects/mubaggresive/wallet/frontend/redux/reducers/errorReducer.js"],"names":["ERROR","REMOVE_ERROR","initialState","message","state","action","type","payload"],"mappings":";;;;;;AAAA,SAASA,KAAT,EAAgBC,YAAhB,QAAoC,qBAApC;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE;AADU,CAArB;AAIA,gBAAe,CAACC,KAAK,GAAGF,YAAT,EAAuBG,MAAvB,KAAkC;AAC/C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,KAAL;AACE,6CAAYI,KAAZ;AAAmBD,QAAAA,OAAO,EAAEE,MAAM,CAACE;AAAnC;;AACF,SAAKN,YAAL;AACE,6CAAYG,KAAZ;AAAmBD,QAAAA,OAAO,EAAE;AAA5B;;AACF;AACE,aAAOC,KAAP;AANJ;AAQD,CATD","sourcesContent":["import { ERROR, REMOVE_ERROR } from '../types/errorTypes';\n\nconst initialState = {\n  message: null,\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case ERROR:\n      return { ...state, message: action.payload };\n    case REMOVE_ERROR:\n      return { ...state, message: null };\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}