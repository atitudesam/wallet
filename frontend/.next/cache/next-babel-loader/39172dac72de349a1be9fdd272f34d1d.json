{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Router from 'next/router';\nimport axios from 'axios';\nimport { AUTHENTICATE, DEAUTHENTICATE } from '../types/authTypes';\nimport { setCookie, removeCookie } from '../../utils/cookie';\nimport { createError, removeError } from './errorActions'; // gets token from the api and stores it in the redux store and in a cookie\n\nvar authenticate = function authenticate(_ref, type) {\n  var email = _ref.email,\n      password = _ref.password;\n\n  if (type !== 'login' && type !== 'register') {\n    throw new Error('Wront API call!');\n  }\n\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var formData, _yield$axios$post, token, response, message;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              formData = {\n                email: email,\n                password: password\n              };\n              _context.prev = 1;\n              _context.next = 4;\n              return axios.post(\"/\".concat(type), formData);\n\n            case 4:\n              _yield$axios$post = _context.sent;\n              token = _yield$axios$post.data.token;\n              setCookie('token', token);\n              Router.push('/');\n              dispatch(removeError());\n              dispatch({\n                type: AUTHENTICATE,\n                payload: token\n              });\n              _context.next = 17;\n              break;\n\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](1);\n              response = _context.t0.response;\n              message = response.data.message;\n              dispatch(createError(message));\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 12]]);\n    }));\n\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n}; // gets the token from the cookie and saves it in the store\n\n\nvar reauthenticate = function reauthenticate(token) {\n  return function (dispatch) {\n    dispatch({\n      type: AUTHENTICATE,\n      payload: token\n    });\n  };\n}; // removing the token\n\n\nvar deauthenticate = function deauthenticate() {\n  return function (dispatch) {\n    removeCookie('token');\n    Router.push('/');\n    dispatch({\n      type: DEAUTHENTICATE\n    });\n  };\n};\n\nexport default {\n  authenticate: authenticate,\n  reauthenticate: reauthenticate,\n  deauthenticate: deauthenticate\n};","map":{"version":3,"sources":["/Users/mubashirsiddiqui/Projects/mubaggresive/wallet/frontend/redux/actions/authActions.js"],"names":["Router","axios","AUTHENTICATE","DEAUTHENTICATE","setCookie","removeCookie","createError","removeError","authenticate","type","email","password","Error","dispatch","formData","post","token","data","push","payload","response","message","reauthenticate","deauthenticate"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,aAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,oBAA7C;AACA,SAASC,SAAT,EAAoBC,YAApB,QAAwC,oBAAxC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,gBAAzC,C,CAEA;;AACA,IAAMC,YAAY,GAAG,SAAfA,YAAe,OAAsBC,IAAtB,EAA+B;AAAA,MAA5BC,KAA4B,QAA5BA,KAA4B;AAAA,MAArBC,QAAqB,QAArBA,QAAqB;;AAClD,MAAIF,IAAI,KAAK,OAAT,IAAoBA,IAAI,KAAK,UAAjC,EAA6C;AAC3C,UAAM,IAAIG,KAAJ,CAAU,iBAAV,CAAN;AACD;;AACD;AAAA,yEAAO,iBAAMC,QAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AACCC,cAAAA,QADD,GACY;AAAEJ,gBAAAA,KAAK,EAALA,KAAF;AAASC,gBAAAA,QAAQ,EAARA;AAAT,eADZ;AAAA;AAAA;AAAA,qBAKOV,KAAK,CAACc,IAAN,YAAeN,IAAf,GAAuBK,QAAvB,CALP;;AAAA;AAAA;AAIOE,cAAAA,KAJP,qBAIDC,IAJC,CAIOD,KAJP;AAMHZ,cAAAA,SAAS,CAAC,OAAD,EAAUY,KAAV,CAAT;AACAhB,cAAAA,MAAM,CAACkB,IAAP,CAAY,GAAZ;AACAL,cAAAA,QAAQ,CAACN,WAAW,EAAZ,CAAR;AACAM,cAAAA,QAAQ,CAAC;AAAEJ,gBAAAA,IAAI,EAAEP,YAAR;AAAsBiB,gBAAAA,OAAO,EAAEH;AAA/B,eAAD,CAAR;AATG;AAAA;;AAAA;AAAA;AAAA;AAUMI,cAAAA,QAVN,eAUMA,QAVN;AAYOC,cAAAA,OAZP,GAaCD,QAbD,CAYDH,IAZC,CAYOI,OAZP;AAcHR,cAAAA,QAAQ,CAACP,WAAW,CAACe,OAAD,CAAZ,CAAR;;AAdG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AAiBD,CArBD,C,CAuBA;;;AACA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAAN,KAAK,EAAI;AAC9B,SAAO,UAAAH,QAAQ,EAAI;AACjBA,IAAAA,QAAQ,CAAC;AAAEJ,MAAAA,IAAI,EAAEP,YAAR;AAAsBiB,MAAAA,OAAO,EAAEH;AAA/B,KAAD,CAAR;AACD,GAFD;AAGD,CAJD,C,CAMA;;;AACA,IAAMO,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3B,SAAO,UAAAV,QAAQ,EAAI;AACjBR,IAAAA,YAAY,CAAC,OAAD,CAAZ;AACAL,IAAAA,MAAM,CAACkB,IAAP,CAAY,GAAZ;AACAL,IAAAA,QAAQ,CAAC;AAAEJ,MAAAA,IAAI,EAAEN;AAAR,KAAD,CAAR;AACD,GAJD;AAKD,CAND;;AAQA,eAAe;AACbK,EAAAA,YAAY,EAAZA,YADa;AAEbc,EAAAA,cAAc,EAAdA,cAFa;AAGbC,EAAAA,cAAc,EAAdA;AAHa,CAAf","sourcesContent":["import Router from 'next/router';\nimport axios from 'axios';\nimport { AUTHENTICATE, DEAUTHENTICATE } from '../types/authTypes';\nimport { setCookie, removeCookie } from '../../utils/cookie';\nimport { createError, removeError } from './errorActions';\n\n// gets token from the api and stores it in the redux store and in a cookie\nconst authenticate = ({ email, password }, type) => {\n  if (type !== 'login' && type !== 'register') {\n    throw new Error('Wront API call!');\n  }\n  return async dispatch => {\n    const formData = { email, password };\n    try {\n      const {\n        data: { token },\n      } = await axios.post(`/${type}`, formData);\n      setCookie('token', token);\n      Router.push('/');\n      dispatch(removeError());\n      dispatch({ type: AUTHENTICATE, payload: token });\n    } catch ({ response }) {\n      const {\n        data: { message },\n      } = response;\n      dispatch(createError(message));\n    }\n  };\n};\n\n// gets the token from the cookie and saves it in the store\nconst reauthenticate = token => {\n  return dispatch => {\n    dispatch({ type: AUTHENTICATE, payload: token });\n  };\n};\n\n// removing the token\nconst deauthenticate = () => {\n  return dispatch => {\n    removeCookie('token');\n    Router.push('/');\n    dispatch({ type: DEAUTHENTICATE });\n  };\n};\n\nexport default {\n  authenticate,\n  reauthenticate,\n  deauthenticate,\n};\n"]},"metadata":{},"sourceType":"module"}