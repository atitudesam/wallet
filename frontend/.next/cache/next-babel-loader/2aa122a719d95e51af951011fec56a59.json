{"ast":null,"code":"import Router from 'next/router';\nimport axios from 'axios';\nimport { AUTHENTICATE, DEAUTHENTICATE } from '../types/authTypes';\nimport { setCookie, removeCookie } from '../../utils/cookie';\nimport { createError, removeError } from './errorActions'; // gets token from the api and stores it in the redux store and in a cookie\n\nconst authenticate = ({\n  email,\n  password\n}, type) => {\n  if (type !== 'login' && type !== 'register') {\n    throw new Error('Wront API call!');\n  }\n\n  return async dispatch => {\n    const formData = {\n      email,\n      password\n    };\n\n    try {\n      const {\n        data: {\n          token\n        }\n      } = await axios.post(`/${type}`, formData);\n      setCookie('token', token);\n      Router.push('/');\n      dispatch(removeError());\n      dispatch({\n        type: AUTHENTICATE,\n        payload: token\n      });\n    } catch ({\n      response\n    }) {\n      const {\n        data: {\n          message\n        }\n      } = response;\n      dispatch(createError(message));\n    }\n  };\n}; // gets the token from the cookie and saves it in the store\n\n\nconst reauthenticate = token => {\n  return dispatch => {\n    dispatch({\n      type: AUTHENTICATE,\n      payload: token\n    });\n  };\n}; // removing the token\n\n\nconst deauthenticate = () => {\n  return dispatch => {\n    removeCookie('token');\n    Router.push('/');\n    dispatch({\n      type: DEAUTHENTICATE\n    });\n  };\n};\n\nexport default {\n  authenticate,\n  reauthenticate,\n  deauthenticate\n};","map":{"version":3,"sources":["/Users/mubashirsiddiqui/Projects/mubaggresive/wallet/frontend/redux/actions/authActions.js"],"names":["Router","axios","AUTHENTICATE","DEAUTHENTICATE","setCookie","removeCookie","createError","removeError","authenticate","email","password","type","Error","dispatch","formData","data","token","post","push","payload","response","message","reauthenticate","deauthenticate"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,aAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,oBAA7C;AACA,SAASC,SAAT,EAAoBC,YAApB,QAAwC,oBAAxC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,gBAAzC,C,CAEA;;AACA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,EAAsBC,IAAtB,KAA+B;AAClD,MAAIA,IAAI,KAAK,OAAT,IAAoBA,IAAI,KAAK,UAAjC,EAA6C;AAC3C,UAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AACD,SAAO,MAAMC,QAAN,IAAkB;AACvB,UAAMC,QAAQ,GAAG;AAAEL,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAjB;;AACA,QAAI;AACF,YAAM;AACJK,QAAAA,IAAI,EAAE;AAAEC,UAAAA;AAAF;AADF,UAEF,MAAMf,KAAK,CAACgB,IAAN,CAAY,IAAGN,IAAK,EAApB,EAAuBG,QAAvB,CAFV;AAGAV,MAAAA,SAAS,CAAC,OAAD,EAAUY,KAAV,CAAT;AACAhB,MAAAA,MAAM,CAACkB,IAAP,CAAY,GAAZ;AACAL,MAAAA,QAAQ,CAACN,WAAW,EAAZ,CAAR;AACAM,MAAAA,QAAQ,CAAC;AAAEF,QAAAA,IAAI,EAAET,YAAR;AAAsBiB,QAAAA,OAAO,EAAEH;AAA/B,OAAD,CAAR;AACD,KARD,CAQE,OAAO;AAAEI,MAAAA;AAAF,KAAP,EAAqB;AACrB,YAAM;AACJL,QAAAA,IAAI,EAAE;AAAEM,UAAAA;AAAF;AADF,UAEFD,QAFJ;AAGAP,MAAAA,QAAQ,CAACP,WAAW,CAACe,OAAD,CAAZ,CAAR;AACD;AACF,GAhBD;AAiBD,CArBD,C,CAuBA;;;AACA,MAAMC,cAAc,GAAGN,KAAK,IAAI;AAC9B,SAAOH,QAAQ,IAAI;AACjBA,IAAAA,QAAQ,CAAC;AAAEF,MAAAA,IAAI,EAAET,YAAR;AAAsBiB,MAAAA,OAAO,EAAEH;AAA/B,KAAD,CAAR;AACD,GAFD;AAGD,CAJD,C,CAMA;;;AACA,MAAMO,cAAc,GAAG,MAAM;AAC3B,SAAOV,QAAQ,IAAI;AACjBR,IAAAA,YAAY,CAAC,OAAD,CAAZ;AACAL,IAAAA,MAAM,CAACkB,IAAP,CAAY,GAAZ;AACAL,IAAAA,QAAQ,CAAC;AAAEF,MAAAA,IAAI,EAAER;AAAR,KAAD,CAAR;AACD,GAJD;AAKD,CAND;;AAQA,eAAe;AACbK,EAAAA,YADa;AAEbc,EAAAA,cAFa;AAGbC,EAAAA;AAHa,CAAf","sourcesContent":["import Router from 'next/router';\nimport axios from 'axios';\nimport { AUTHENTICATE, DEAUTHENTICATE } from '../types/authTypes';\nimport { setCookie, removeCookie } from '../../utils/cookie';\nimport { createError, removeError } from './errorActions';\n\n// gets token from the api and stores it in the redux store and in a cookie\nconst authenticate = ({ email, password }, type) => {\n  if (type !== 'login' && type !== 'register') {\n    throw new Error('Wront API call!');\n  }\n  return async dispatch => {\n    const formData = { email, password };\n    try {\n      const {\n        data: { token },\n      } = await axios.post(`/${type}`, formData);\n      setCookie('token', token);\n      Router.push('/');\n      dispatch(removeError());\n      dispatch({ type: AUTHENTICATE, payload: token });\n    } catch ({ response }) {\n      const {\n        data: { message },\n      } = response;\n      dispatch(createError(message));\n    }\n  };\n};\n\n// gets the token from the cookie and saves it in the store\nconst reauthenticate = token => {\n  return dispatch => {\n    dispatch({ type: AUTHENTICATE, payload: token });\n  };\n};\n\n// removing the token\nconst deauthenticate = () => {\n  return dispatch => {\n    removeCookie('token');\n    Router.push('/');\n    dispatch({ type: DEAUTHENTICATE });\n  };\n};\n\nexport default {\n  authenticate,\n  reauthenticate,\n  deauthenticate,\n};\n"]},"metadata":{},"sourceType":"module"}